{"version":3,"sources":["components/header/header.module.css","resources/images/logo.svg","components/header/header.jsx","components/aside/aside.jsx","components/main/main.jsx","components/actions.jsx","components/pop-up/pop-up.jsx","components/timeline/timeline-row/timeline-row.jsx","components/timeline/time-line.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","style","header","logo","src","alt","title","version","Aside","props","children","Main","ACTION","reserve","cancel","PopUp","isVisible","startTime","moment","reservedDate","format","endTime","add","id","onClick","event","target","actions","popupClickHandler","selectedDate","type","value","disabled","TimelineRow","useState","statusClass","setStatusClass","useEffect","timelineRowClass","isWorkingDay","isBreak","isMorningShift","isOccupied","date","appendLeadingZero","onCancel","alert","reservationHandler","time","getHours","getMinutes","WORKING_HORUS","Timeline","setSelectedDate","workingDates","setWorkingDates","morningShift","workingDay","startWorkingHours","dayOfWeek","getDay","dateOfDay","getDate","evenDay","getRandomInt","max","Math","floor","random","dates","i","push","Date","setHours","map","entry","index","key","App","state","isPopupVisible","onChange","toLocaleDateString","setState","action","cancelHandler","onReservation","nextProps","nextState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e938ef4b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2hf14\",\"logo\":\"header_logo__1FR8c\",\"title\":\"header_title__2JOFF\",\"version\":\"header_version__341jJ\"};","module.exports = __webpack_public_path__ + \"static/media/logo.7d265621.svg\";","import React from 'react';\r\n\r\nimport logo from '../../resources/images/logo.svg';\r\n\r\nimport style from './header.module.css';\r\n\r\nconst Header = () => (\r\n    <header className={style.header}>\r\n        <img className={style.logo} src={logo} alt=\"\"/>\r\n        <h1 className={style.title}>Kalendar</h1>\r\n        <span className={style.version}>v0.1</span>\r\n    </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react'\r\n\r\nimport './aside.css';\r\n\r\nexport const Aside = (props) => {\r\n    return (\r\n        <aside className = \"aside\">\r\n            {props.children}\r\n        </aside>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport './main.css';\r\n\r\nexport const Main = (props) => {\r\n    return (\r\n        <main className = \"app-main\">\r\n            {props.children}\r\n        </main>\r\n    )\r\n}","const ACTION = {\r\n    reserve: 'reserve',\r\n    cancel: 'cancel'\r\n};\r\n\r\nexport default ACTION;","import React from 'react';\r\n\r\nimport moment from 'moment';\r\nimport actions from '../actions';\r\n\r\nimport './pop-up.css';\r\n\r\nexport const PopUp = (props) => {\r\n    const isVisible = (props.isVisible) ? 'visible' : '';\r\n    const startTime = moment(props.reservedDate).format('HH:mm');\r\n    const endTime = moment(props.reservedDate).add(30, 'minutes').format('HH:mm');\r\n\r\n    const onClick = (event) => {\r\n        const target = event.target;\r\n\r\n        if (actions.reserve === target.id) {\r\n            props.popupClickHandler(actions.reserve);\r\n        } else if (actions.cancel === target.id) {\r\n            props.popupClickHandler(actions.cancel);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id=\"modal-background\" className={isVisible}>\r\n          <div id=\"pop-up\" className={isVisible}>\r\n            <div className=\"popup-content\" onClick={onClick}>\r\n                <header>\r\n                    <span className=\"label\">Termin</span>\r\n                    <span id=\"cancel\">×</span>\r\n                </header>\r\n                \r\n                <h3>Odabrani datum: {moment(props.selectedDate).format('DD.MM.YYYY')}</h3>\r\n                <input type=\"text\" id=\"inputField\" value={startTime + \" - \" + endTime} disabled/>\r\n                <button id=\"reserve\" className=\"button-popup\">Rezerviraj termin</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport './timeline-row.css';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nconst TimelineRow = (props) => {\r\n    const[statusClass, setStatusClass] = useState('');\r\n\r\n    useEffect(() => {\r\n        let timelineRowClass = 'disabled-timeline-row';\r\n\r\n        if (props.isWorkingDay) {\r\n            //timelineRowClass = 'timeline-row';\r\n\r\n            if (props.isBreak && props.isMorningShift) {\r\n                timelineRowClass = 'timeline-row-break';\r\n            } else if (props.isOccupied && props.isMorningShift) {\r\n                timelineRowClass = 'timeline-row-occupied';\r\n            } else if (props.isMorningShift) {\r\n                timelineRowClass = 'timeline-row';\r\n            }\r\n        }\r\n\r\n        setStatusClass(timelineRowClass);\r\n    }, [props.date]);\r\n\r\n    const appendLeadingZero = (value) => {\r\n        if (value <= 9) {\r\n            return '0' + value;\r\n        }\r\n\r\n        return value;\r\n    };\r\n\r\n    const clickHandler = (event) => {\r\n        if (!props.isWorkingDay) {\r\n            alert('Nemoguće rezervirati termin na neradni dan');\r\n            return;\r\n        }\r\n\r\n        if (props.isBreak) {\r\n            alert('Nije moguće odabrati termin u vrijeme pauze');\r\n            return;\r\n        }\r\n\r\n        if (props.isOccupied) {\r\n            alert('Odabrani termin je već zauzet');\r\n            return;\r\n        }\r\n\r\n        if (!props.isMorningShift) {\r\n            alert('Odabrani termin nije u radnom vremenu');\r\n            return;\r\n        }\r\n\r\n        setStatusClass('timeline-row-occupied');\r\n\r\n        props.reservationHandler(props.date, onCancel);\r\n    };\r\n\r\n    const onCancel = () => {\r\n        setStatusClass('timeline-row');\r\n    };\r\n\r\n    return (\r\n        <div className={statusClass} onClick={clickHandler} \r\n             time={appendLeadingZero(props.date.getHours()) + \":\" + appendLeadingZero(props.date.getMinutes())}>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimelineRow;","import React, { useState, useEffect } from 'react'\r\n\r\nimport TimelineRow from './timeline-row/timeline-row';\r\n\r\nimport './time-line.css';\r\n\r\nconst WORKING_HORUS = {\r\n    start: 8,\r\n    end: 19\r\n};\r\n\r\nconst Timeline = (props) => {\r\n    const[selectedDate, setSelectedDate] = useState(props.selectedDate);\r\n    const[workingDates, setWorkingDates] = useState([]);\r\n\r\n    let morningShift = true,\r\n        workingDay = false,\r\n        isBreak = false;\r\n\r\n    function startWorkingHours() {\r\n        let dayOfWeek = props.selectedDate.getDay(),\r\n            dateOfDay = props.selectedDate.getDate();\r\n\r\n        if (dayOfWeek === 6) {\r\n\t\t\tif (evenDay(dateOfDay)) {\r\n\t\t\t\tworkingDay = true;\r\n\t\t\t}\r\n\t\t} else if (dayOfWeek !== 0) {\r\n\t\t\tif (evenDay(dateOfDay)) {\r\n\t\t\t\tworkingDay = true;\r\n\t\t\t} else {\r\n                workingDay = true;\r\n\t\t\t\tmorningShift = false;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    function evenDay(dayOfWeek) {\r\n        if (dayOfWeek % 2 === 1) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function getRandomInt(max) {\r\n\t\t  return Math.floor(Math.random() * Math.floor(max));\r\n\t}\r\n\r\n    useEffect(() => {\r\n        const dates = [];\r\n\r\n        for (let i = WORKING_HORUS.start; i <= WORKING_HORUS.end; i ++) {\r\n            startWorkingHours();\r\n\r\n            dates.push({\r\n                date: new Date(selectedDate.setHours(i, 0, 0)),\r\n                isWorkingDay: workingDay,\r\n                isMorningShift:  ((morningShift && i < 14) || (!morningShift && i > 12) ) ? true : false,\r\n                isBreak: (i=== 11 || i === 16) ? true : isBreak,\r\n                isOccupied: ((i!== 11 && i !== 16) && getRandomInt(2)) ? true : false\r\n            });\r\n\r\n            if (i < WORKING_HORUS.end) {\r\n                dates.push({\r\n                    date: new Date(selectedDate.setHours(i, 30, 0)),\r\n                    isWorkingDay: workingDay,\r\n                    isMorningShift: ((morningShift && i < 14) || (!morningShift && i > 12) ) ? true : false,\r\n                    isBreak: isBreak,\r\n                    isOccupied: ((i!== 11 && i !== 16 ) && getRandomInt(2)) ? true : false\r\n                });\r\n            }\r\n        }\r\n\r\n        setSelectedDate(props.selectedDate);\r\n        setWorkingDates(dates);\r\n    }, [props.selectedDate]);\r\ndebugger;\r\n    return (\r\n        <ul className=\"time-line-list\">\r\n            {workingDates.map((entry, index) => <TimelineRow key={index} isWorkingDay={entry.isWorkingDay} isMorningShift={entry.isMorningShift}\r\n            isBreak={entry.isBreak} isOccupied={entry.isOccupied} date={entry.date} reservationHandler={props.reservationHandler}/>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nexport default Timeline;","import React, { Component, Fragment} from 'react';\n\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n\nimport Header from './components/header/header';\nimport {Aside} from './components/aside/aside';\nimport {Main} from './components/main/main';\nimport {PopUp} from './components/pop-up/pop-up';\nimport Timeline from './components/timeline/time-line';\n\nimport actions from './components/actions';\n\nclass App extends Component {\n\n  state = {\n    date: new Date(),\n    isPopupVisible: false,\n    reservedDate: null\n  };\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.state.date !== nextState.date || this.state.isPopupVisible !== nextState.isPopupVisible;\n  }\n \n  onChange = (date) => {\n    if (this.state.date.toLocaleDateString() !== date.toLocaleDateString()) {\n      this.setState({\n        ...this.state,\n        date: date,\n        reservedDate: null\n      });\n    }\n  };\n\n  popupClickHandler = (action) => {\n    if (actions.reserve === action) {\n      this.setState({\n        ...this.state,\n        isPopupVisible: false\n      });\n    } else if (actions.cancel === action) {\n        this.cancelHandler();\n        this.setState({\n          ...this.state,\n          isPopupVisible: false,\n          reservedDate: null\n        });\n    }\n  };\n  \n  onReservation = (reservedDate, onCancel) => {\n    if (this.state.reservedDate !== null) {\n      onCancel();\n      alert('Nije moguće rezervirati više od jednog termina dnevno');\n      return;\n    }\n\n    this.setState({\n      ...this.state,\n      isPopupVisible: true,\n      reservedDate: reservedDate\n    });\n\n    this.cancelHandler = onCancel;\n  };\n \n  render() {\n    return (\n      <Fragment>\n        <Header/>\n        <Main>\n          <Aside>\n            <Calendar\n              className = \"calendar\"\n              onChange = {this.onChange}\n              value = {this.state.date}\n            />\n          </Aside>\n          <Timeline selectedDate = {this.state.date} reservationHandler={this.onReservation}/>\n        </Main>\n        <PopUp isVisible={this.state.isPopupVisible} selectedDate={this.state.date} reservedDate={this.state.reservedDate} popupClickHandler={this.popupClickHandler} />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './resources/styles/normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}